@charset "UTF-8";

//TODO: verified
/// Position-set mixin provides a one-line method to rapidly set both the position and the offset properties of a selected element.
/// @param {string} $position [static, relative, fixed, absolute, sticky] - this option sets the position property of a selected element(s)
/// @param {list (top, right, bottom, left)} $offsets [0] - accepts a list of values to set the offset of the edges of the box. Uses CSS shorthand method
/// @example
///
///  /* example 1 */
///
///  .containing-element {
///  	@include position-set(absolute);
///  }
///
///  /* example 2 */
///
///  .containing-element {
///  	@include position-set(fixed);
///  }
///
///  /* example 3 - with offsets values */
///
///  .containing-element {
///  	@include position-set(relative, 20px 30px 20px 30px);
///  }
///
///  /* example 4 - omit a value with "null" */
///
///  .containing-element {
///  	@include position-set(sticky, null 30px null 30px);
///  }
@mixin position-set($position: absolute, $offsets: 0) {
	$offsets: __shorthandProperty($offsets);
	$positioning-offsets: (
		top: nth($offsets, 1),
		right: nth($offsets, 2),
		bottom: nth($offsets, 3),
		left: nth($offsets, 4),
	);
	position: $position;
	@each $offset, $value in $positioning-offsets {
		@if __validateLength($value) {
			#{$offset}: $value;
		}
	}
}

//TODO: verified
/// Position-center mixin allows you to center elements (the elements that have position value either absolute or fixed) on both the horizontal and vertical axes - [WARNING]: You must declare either position: absolute or position: fixed style rule to the selected element to make this mixin work correctly. The parent element’s position value, which you’ll be centering within must be other than static.
/// @param {string} $axis [vertical, horizontal, both] - sets the axis of the alingment (element position)
/// @example
///  /* example 1 - both */
///
///  .parent-element {
///  	position: relative;
///  	.element {
///  		position: absolute;
///  		/* (top: 50%, left: 50%) */
///  		@include position-center(both);
///  	}
///  }
///
///  /* example 2 - horizontal */
///
///  .parent-element {
///  	position: relative;
///  	.element {
///  		position: absolute;
///  		/* (left: 50%) */
///  		@include center(horizontal);
///  	}
///  }
///
///  /* example 3 - vertical */
///
///  .parent-element {
///  	position: relative;
///  	.element {
///  		position: absolute;
///  		/* (top: 50%) */
///  		@include position-center(vertical);
///  	}
///  }
@mixin position-center($axis: 'both') {
	@if $axis == 'both' or $axis == 'vertical' {
		top: 50%;
	}
	@if $axis == 'both' or $axis == 'horizontal' {
		left: 50%;
	}
	transform: if(
			$axis == 'horizontal',
			translateX(-50%),
			if($axis == 'both', translateX(-50%), null)
		)
		if(
			$axis == 'vertical',
			translateY(-50%),
			if($axis == 'both', translateY(-50%), null)
		);
	@if not($axis == 'both' or $axis == 'vertical' or $axis == 'horizontal') {
		@error "The argument must be `vertical` or `horizontal` or `both`";
	}
}

//TODO: verified
/// Quickly center a block
/// @example
///  .containing-element {
///	  @include position-block-center();
///  }
@mixin position-block-center {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

//TODO: verified
/// Quickly center child item
/// @example
///  .containing-element {
///	  @include position-flex-center();
///  }
@mixin position-flex-center {
	display: flex;
	align-items: center;
	justify-content: center;
}
