@charset "UTF-8";

/// Breakpoint mixin helps you to create scalable media queries and breakpoints by using the @media CSS at-rule in SCSS.
/// @param {string} $mode [only, min, max, beetween] - sets the width media feature
/// @param {pixel, string} $value [xsmall, small, medium, large, xlarge] - the width value to which your styles will be applied
/// @example
///  /* example 1 - if you set the $mode option to only, the code below will apply styles only if your browser’s viewport is equal to 1200px. */
///
///  .containing-element {
///  	/* idem -> @media (width: 1200px) */
///  	@include breakpoint(only, 1200px) {
///  		background-color: teal;
///  	}
///  }
///
///  /* example 2 - let’s set the $mode option to "min" or "max" and pass a predefined breakpoint value. If you are a mobile-first person you are going to use this one a lot */
///
///  .containing-element {
///  	/* idem -> @media (min-width: 768px) */
///  	@include breakpoint(min, medium) {
///  		background-color: green;
///  	}
///
///  	/* idem -> @media (max-width: 1024px) */
///  	@include breakpoint(max, 1024px) {
///  		background-color: yellow;
///  	}
///  }
///
///  /* example 3 - we can set a range between two values ​​to apply our styles. */
///
///  .containing-element {
///  	/* idem -> @media (min-width: 576px) and (max-width: 1200px) */
///  	@include breakpoint(between, small 1200px) {
///  		background-color: orangered;
///  	}
///  }
@mixin breakpoint($params...) {
	@if length($params) == 1 {
		$value: nth($params, 1);
		@if map-has-key($map-for-breakpoints, $value) {
			@media (width: map-get($map-for-breakpoints, $value)) {
				@content;
			}
		} @else {
			@media (width: $value) {
				@content;
			}
		}
	} @else if length($params) == 2 {
		@if not index('only' 'min' 'max' 'between', nth($params, 1)) {
			$start: nth($params, 1);
			$end: nth($params, 2);
			@media (min-width: #{__validateBreakpoint($start)}) and (max-width: #{if(map-has-key($map-for-breakpoints, $end), __validateBreakpoint($end) - 1, $end)}) {
				@content;
			}
		} @else {
			$mode: nth($params, 1);
			$value: nth($params, 2);
			@if $mode == 'only' {
				@if map-has-key($map-for-breakpoints, $value) {
					@media (width: map-get($map-for-breakpoints, $value)) {
						@content;
					}
				} @else {
					@media (width: $value) {
						@content;
					}
				}
			} @else if $mode == 'min' {
				@if map-has-key($map-for-breakpoints, $value) {
					@media (min-width: map-get($map-for-breakpoints, $value)) {
						@content;
					}
				} @else {
					@media (min-width: $value) {
						@content;
					}
				}
			} @else if $mode == 'max' {
				@if map-has-key($map-for-breakpoints, $value) {
					@media (max-width: map-get($map-for-breakpoints, $value)) {
						@content;
					}
				} @else {
					@media (max-width: $value) {
						@content;
					}
				}
			} @else if $mode == 'between' {
				$start: nth($value, 1);
				$end: nth($value, 2);
				@media (min-width: #{__validateBreakpoint($start)}) and (max-width: #{if(map-has-key($map-for-breakpoints, $end), __validateBreakpoint($end) - 1, $end)}) {
					@content;
				}
			}
		}
	}
}
