@charset "UTF-8";

//TODO: verified
/// Loadify mixin is a handy tool that can help you make a page element load with a smooth fade-in effect during the time of page loadings.
/// @param {string} $mode [init] - this initializes the whole effects for the selected elements. It must be called once at the root of your stylesheet document
/// @param {second} $delay [0.2s] - specifies the amount of time a design element must wait before it starts appearing on the page. The default value is set to 0.2s
/// @param {second} $duration [0.5s] - sets the length of time that a page element takes to load. This is the second argument and always must be at the end and cannot be used alone
/// @example
/// /* HTML */
///
///  <div class="parent-element">
///    <div class="item">01</div>
///    <div class="item">02</div>
///    <div class="item">03</div>
///    <div class="item">04</div>
///    <div class="item">05</div>
///    <div class="item">06</div>
///    <div class="item">07</div>
///    <div class="item">08</div>
///  </div>
///
///  /* init - let’s call the Loadify mixin as an initializer first at the root level of your stylesheet and pass the init value as an argument */
///
///  @include loadify(init);
///
///  /* example 1 - with delay */
///
///  img {
///  	@include loadify(0.5s);
///  }
///
///  /* example 2 - apply loadify for all items */
///
///  .parent-element {
///    .item {
///      @include loadify();
///  	}
///  }
///
///  /* example 3 - we’ll be using only mixin to select items in the list based on their index positions and then call the loadify mixin in each of the selectors to make elements appear in different time values (different delay and duration times) on the page */
///
///  .parent-element {
///  	.item {
///  		@include only(1) {
///  			@include loadify(0.2s);
///  		}
///  		@include only(2) {
///  			@include loadify(0.4s);
///  		}
///  		@include only(3) {
///  			@include loadify(0.6s);
///  		}
///  		@include only(4) {
///  			@include loadify(0.8s);
///  		}
///  		@include only(5) {
///  			@include loadify(0.1s);
///  		}
///  		@include only(6) {
///  			@include loadify(1.2s);
///  		}
///  		@include only(7) {
///  			@include loadify(1.4s);
///  		}
///  		@include only(8) {
///  			@include loadify(1.6s);
///  		}
///  	}
///  }
@mixin loadify($params...) {
	@if not & {
		@if length($params) ==
			0 or
			(length($params) == 1 and nth($params, 1) == 'init')
		{
			@keyframes loadify {
				to {
					opacity: 1;
					visibility: visible;
					backface-visibility: visible;
				}
			}
			%loadify {
				opacity: 0;
				visibility: hidden;
				backface-visibility: hidden;
				animation-name: loadify;
				animation-fill-mode: forwards;
			}
		} @else if
			(length($params) == 1 and nth($params, 1) != 'init') or
			(length($params) == 1 and type-of(nth($params, 1)) != 'string')
		{
			@error "#{nth($params, 1)} is not a valid argument. Please pass `init` as an argument to initialize the effect or do not pass any argument at all.";
		} @else if length($params) > 1 {
			@error "Only one argument is allowed when you call this mixin at the root of your stylesheet! Please pass `init` as an argument to initialize the effect or do not pass any argument at all.";
		}
	} @else if & {
		@extend %loadify;
		@if length($params) == 0 {
			animation-delay: 0.2s;
			animation-duration: 0.5s;
		} @else if length($params) == 1 {
			animation-delay: #{__isTime(nth($params, 1))};
			animation-duration: 0.5s;
		} @else if length($params) == 2 {
			animation-delay: #{__isTime(nth($params, 1))};
			animation-duration: #{__isTime(nth($params, 2))};
		} @else if length($params) > 2 {
			@error "You cannot pass more than two arguments.";
		}
	}
}
